This process is a bit convoluted, but here is what I did to create our
character ROM:

I'm using the DejaVu LGC Sans Mono font, which has a nice aspect ratio
for our purposes.

1) Using Gimp, create rawchars.xcf with each character on a separate line,
in ASCII order from char 32 (space) through 127 (del).  The image starts
out wider than strictly necessary, because the Gimp text tool doesn't like
to be too constrained.  Note that smoothing is turned off, because we just
want pure black/white pixels - no grayscale!

I fiddled with the font size, until I got the characters to fit in our
chosen 16x32 per-character raster.  While I didn't expect it, "w" was
wider than "M"!  It turns out that 22 pt type is the largest size that fits.

I didn't trim the width at this point.

2) I copied that to flattenedchars.xcf so I wouldn't have to start over if
I saw something wrong.  Once flattened, you cannot go back to text edit mode.

Flatten the image, but first set some cursors to remember how tall the
textbox was.  Then, do a rectangular selection, exactly 16 pels wide, and
trim the canvas to eliminate the slack.  Export the result as
flattenedchars.png.

3) Check using "file" to be sure the png is 16 bits wide, then use
ImageMagick to convert it to a .h file.  The command is:

convert flattenedchars.png flattenedchars.h

At first, we don't know how much of the resulting array we will wind up
skipping (there is a header that we must remove), and we don't know if we
have exactly the right number of bytes to just fill the last character.
I had to adjust the SKIP parameter in genit.c to eliminate the header,
then I had to tweak flattenedchars.h so exactly 8192 rows were produced.

It turned out that I had to add one full line of 0x00 at the end of the
file, plus two more 0x00 bytes on the partial line.  I.e, the generated
file will initially end with this line:

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00

but we replace that line with:

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

Without that edit, the last character will be too short.  Again, we need to
end up with line 8191 in the file created by genit.c in the next step.

4) Use the genit.c program to create chars.mif.  It turned out that the font
is 16x32, which is perfect.

To get 24 lines in 1024 rows, we want 16x42, so our VHDL will have to pad by
10 lines at the bottom.  That is handled in frame_gen.vhd.

One more consideration for the SKIP parameter: we have to choose SKIP so the
characters are properly centered vertically.

Here is how the "sharp sign" (#) should come out:

1120 : 0000000000000000; -- ................ #
1121 : 0000000000000000; -- ................
1122 : 0000000000000000; -- ................
1123 : 0000000000000000; -- ................
1124 : 0000000000000000; -- ................
1125 : 0000000000000000; -- ................
1126 : 0000000110001100; -- .......@@...@@..
1127 : 0000001100001100; -- ......@@....@@..
1128 : 0000001100011100; -- ......@@...@@@..
1129 : 0000001100011000; -- ......@@...@@...
1130 : 0000001100011000; -- ......@@...@@...
1131 : 0111111111111111; -- .@@@@@@@@@@@@@@@
1132 : 0111111111111111; -- .@@@@@@@@@@@@@@@
1133 : 0000011000110000; -- .....@@...@@....
1134 : 0000011000110000; -- .....@@...@@....
1135 : 0000110000110000; -- ....@@....@@....
1136 : 0000110001100000; -- ....@@...@@.....
1137 : 1111111111111110; -- @@@@@@@@@@@@@@@.
1138 : 1111111111111110; -- @@@@@@@@@@@@@@@.
1139 : 0001100001100000; -- ...@@....@@.....
1140 : 0001100011000000; -- ...@@...@@......
1141 : 0001100011000000; -- ...@@...@@......
1142 : 0011100011000000; -- ..@@@...@@......
1143 : 0011000111000000; -- ..@@...@@@......
1144 : 0000000000000000; -- ................
1145 : 0000000000000000; -- ................
1146 : 0000000000000000; -- ................
1147 : 0000000000000000; -- ................
1148 : 0000000000000000; -- ................
1149 : 0000000000000000; -- ................
1150 : 0000000000000000; -- ................
1151 : 0000000000000000; -- ................
