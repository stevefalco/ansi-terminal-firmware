                        ; --------------------------------------
                        ; zasm: assemble "terminal_fw.asm"
                        ; date: 2021-02-24 15:48:49
                        ; --------------------------------------


                        #target rom
                        
0000:                   #code ROM, 0x0000, 0x4000
                        
0000:                   rom	equ 0x0000
4000:                   ram	equ 0x4000
8000:                   video	equ 0x8000
C000:                   uart	equ 0xc000
C010:                   dipSW	equ 0xc010
                        
0000: F3       [ 4]     RST0:	di
0001: 31FF7F   [14]     	ld	sp, $7fff
0004: C36D00   [24]     	jp	start
                        
0007: FF                	defs	0x08-$
0008: C9       [10]     RST1:	ret
                        
0009: FFFFFFFF          	defs	0x10-$
000D: FFFFFF            
0010: C9       [10]     RST2:	ret
                        
0011: FFFFFFFF          	defs	0x18-$
0015: FFFFFF            
0018: C9       [10]     RST3:	ret
                        
0019: FFFFFFFF          	defs	0x20-$
001D: FFFFFF            
0020: C9       [10]     RST4:	ret
                        
0021: FFFFFFFF          	defs	0x28-$
0025: FFFFFF            
0028: C9       [10]     RST5:	ret
                        
0029: FFFFFFFF          	defs	0x30-$
002D: FFFFFF            
0030: C9       [10]     RST6:	ret
                        
0031: FFFFFFFF          	defs	0x38-$
0035: FFFFFF            
0038: FB       [ 4]     RST7:	ei
0039: C9       [14]     	ret
                        
003A: FFFFFFFF          	defs	0x66-$
003E: FF...             
0066: ED57     [ 9]     NMI:	ld	a, i
0068: F5       [20]     	push	af
0069: F1       [30]     	pop	af
006A: E0       [35|41]  	ret	po
006B: FB       [39]     	ei
006C: C9       [49]     	ret
                        
006D:                   start:
006D: CDC100   [17]     	call	set_baud
                        
                        	; write char
0070: 0629     [24]     	ld	b, 0x29
0072: CDB400   [41]     	call	send_char
                        
                        	; write char
0075: 0655     [48]     	ld	b, 0x55
0077: CDB400   [65]     	call	send_char
                        
                        	; write char
007A: 06AA     [72]     	ld	b, 0xaa
007C: CDB400   [89]     	call	send_char
                        
                        	; move bytes around
007F: 018007   [10]     mover:	ld	bc, 1920
0082: 110040   [20]     	ld	de, ram
0085: 210080   [30]     	ld	hl, video
0088: 7E       [ 7]     again:	ld	a, (hl)
0089: 12       [14]     	ld	(de), a
008A: 23       [20]     	inc	hl
008B: 13       [26]     	inc	de
008C: 0B       [32]     	dec	bc
008D: 78       [36]     	ld	a, b
008E: B1       [40]     	or	c
008F: 20F7     [47|52]  	jr	nz, again
                        
0091: 018007   [10]     back:	ld	bc, 1920
0094: 110080   [20]     	ld	de, video
0097: 217F47   [30]     	ld	hl, ram + 1919
009A: 7E       [ 7]     b2:	ld	a, (hl)
009B: 12       [14]     	ld	(de), a
009C: 2B       [20]     	dec	hl
009D: 13       [26]     	inc	de
009E: 0B       [32]     	dec	bc
009F: 78       [36]     	ld	a, b
00A0: B1       [40]     	or	c
00A1: 20F7     [47|52]  	jr	nz, b2
                        
00A3: 160A     [ 7]     pause:	ld	d, 10
                        
00A5: 01FFFF   [10]     b4:	ld	bc, 65535
00A8: 0B       [ 6]     b3:	dec	bc
00A9: 78       [10]     	ld	a, b
00AA: B1       [14]     	or	c
00AB: 20FB     [21|26]  	jr	nz, b3
                        
00AD: 15       [25]     	dec	d
00AE: 20F5     [32|37]  	jr	nz, b4
                        
00B0: 18BB     [44]     	jr	start
00B2: 18FE     [56]     	jr	$
                        
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ; send_char - write the character in B to the uart
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
00B4:                   send_char:
                        
00B4: 2105C0   [10]     	ld	hl, uart + 5
00B7: 7E       [17]     	ld	a, (hl)
00B8: CB77     [25]     	bit	6, a
00BA: 28F8     [32|37]  	jr	z, send_char ; wait for the uart to be ready
                        
00BC: 2100C0   [42]     	ld	hl, uart
00BF: 70       [49]     	ld	(hl), b
                        
00C0: C9       [59]     	ret
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ; set_baud - set the baud rate based on the dip switches
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
00C1:                   set_baud:
                        
                        	; read dip switches into de
00C1: 2110C0   [10]     	ld	hl, dipSW
00C4: 1600     [17]     	ld	d, 0
00C6: 5E       [24]     	ld	e, (hl)
                        
                        	; point to the correct entry
00C7: 21E300   [34]     	ld	hl, baud_table
00CA: 19       [45]     	add	hl, de
00CB: 19       [56]     	add	hl, de
                        
                        	; load the entry into bc
00CC: 7E       [63]     	ld	a, (hl)
00CD: 23       [69]     	inc	hl
00CE: 46       [76]     	ld	b, (hl)
00CF: 4F       [80]     	ld	c, a
                        
                        	; unlock divisor registers
00D0: 2103C0   [90]     	ld	hl, uart + 3
00D3: 3E80     [97]     	ld	a, 0x80
00D5: 77       [104]    	ld	(hl), a
                        
                        	; write the baud rate divisor
00D6: 2100C0   [114]    	ld	hl, uart
00D9: 71       [121]    	ld	(hl), c
                        
00DA: 23       [127]    	inc	hl
00DB: 70       [134]    	ld	(hl), b
                        
                        	; lock divisor registers and set 8 bit data, no parity, one stop bit.
00DC: 2103C0   [144]    	ld	hl, uart + 3
00DF: 3E03     [151]    	ld	a, 0x03
00E1: 77       [158]    	ld	(hl), a
                        
00E2: C9       [168]    	ret
                        
00E3:                   baud_table:
00E3: A21C              	.DW	7330	; sw=0 for 110 baud
00E5: 800A              	.DW	2688	; sw=1 for 300 baud
00E7: 4005              	.DW	1344	; sw=2 for 600 baud
00E9: A002              	.DW	672	; sw=3 for 1200 baud
00EB: 5001              	.DW	336	; sw=4 for 2400 baud
00ED: A800              	.DW	168	; sw=5 for 4800 baud
00EF: 5400              	.DW	84	; sw=6 for 9600 baud
00F1: 2A00              	.DW	42	; sw=7 for 19200 baud
00F3: 1500              	.DW	21	; sw=8 for 38400 baud
00F5: 0E00              	.DW	14	; sw=9 for 57600 baud
00F7: 0700              	.DW	7	; sw=10 for 115200 baud
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; +++ segments +++

#CODE ROM      = $0000 =     0,  size = $4000 = 16384

; +++ global symbols +++

NMI        = $0066 =   102  ROM     terminal_fw.asm:38 (unused)
ROM        = $0000 =     0  ROM     terminal_fw.asm:3 (unused)
ROM_end    = $4000 = 16384  ROM     terminal_fw.asm:3 (unused)
ROM_size   = $4000 = 16384  ROM     terminal_fw.asm:3 (unused)
RST0       = $0000 =     0  ROM     terminal_fw.asm:11 (unused)
RST1       = $0008 =     8  ROM     terminal_fw.asm:16 (unused)
RST2       = $0010 =    16  ROM     terminal_fw.asm:19 (unused)
RST3       = $0018 =    24  ROM     terminal_fw.asm:22 (unused)
RST4       = $0020 =    32  ROM     terminal_fw.asm:25 (unused)
RST5       = $0028 =    40  ROM     terminal_fw.asm:28 (unused)
RST6       = $0030 =    48  ROM     terminal_fw.asm:31 (unused)
RST7       = $0038 =    56  ROM     terminal_fw.asm:34 (unused)
again      = $0088 =   136  ROM     terminal_fw.asm:64
b2         = $009A =   154  ROM     terminal_fw.asm:76
b3         = $00A8 =   168  ROM     terminal_fw.asm:88
b4         = $00A5 =   165  ROM     terminal_fw.asm:87
back       = $0091 =   145  ROM     terminal_fw.asm:73 (unused)
baud_table = $00E3 =   227  ROM     terminal_fw.asm:159
dipSW      = $C010 = 49168  ROM     terminal_fw.asm:9
mover      = $007F =   127  ROM     terminal_fw.asm:61 (unused)
pause      = $00A3 =   163  ROM     terminal_fw.asm:85 (unused)
ram        = $4000 = 16384  ROM     terminal_fw.asm:6
rom        = $0000 =     0  ROM     terminal_fw.asm:5 (unused)
send_char  = $00B4 =   180  ROM     terminal_fw.asm:104
set_baud   = $00C1 =   193  ROM     terminal_fw.asm:122
start      = $006D =   109  ROM     terminal_fw.asm:45
uart       = $C000 = 49152  ROM     terminal_fw.asm:8
video      = $8000 = 32768  ROM     terminal_fw.asm:7


total time: 0.0032 sec.
no errors
