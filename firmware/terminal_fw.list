                        ; --------------------------------------
                        ; zasm: assemble "terminal_fw.asm"
                        ; date: 2021-02-26 09:38:28
                        ; --------------------------------------


                        #target rom
                        
0000:                   #code ROM, 0x0000, 0x4000
                        
0000:                   rom			equ 0x0000
4000:                   ram			equ 0x4000
8000:                   video			equ 0x8000
                        
                        ; UART registers
C000:                   uart_base		equ 0xc000
C000:                   uart_RBR		equ (uart_base + 0x00)		; Receiver Buffer Register - read-only
C000:                   uart_THR		equ (uart_base + 0x00)		; Transmitter Holding Register - write-only
C001:                   uart_IER		equ (uart_base + 0x01)		; Interrupt Enable Register
C002:                   uart_IIR		equ (uart_base + 0x02)		; Interrupt Identification Register - read-only
C002:                   uart_FCR		equ (uart_base + 0x02)		; FIFO Control Register - write-only
C003:                   uart_LCR		equ (uart_base + 0x03)		; Line Control Register
C004:                   uart_MCR		equ (uart_base + 0x04)		; Modem Control Register
C005:                   uart_LSR		equ (uart_base + 0x05)		; Line Status Register
C006:                   uart_MSR		equ (uart_base + 0x06)		; Modem Status Register
C007:                   uart_SCR		equ (uart_base + 0x07)		; Scratch Register
C000:                   uart_DLL		equ (uart_base + 0x00)		; Divisor Latch Low Byte (only when DLAB=1)
C001:                   uart_DLM		equ (uart_base + 0x01)		; Divisor Latch High Byte (only when DLAB=1)
                        
                        ; UART register bits
                        
                        ; IER
0000:                   uart_IER_ERBFI_b	equ 0				; Enable Received Data Available Interrupt
0001:                   uart_IER_ETBEI_b	equ 1				; Enable Transmitter Holding Register Empty Interrupt
0002:                   uart_IER_ELSI_b		equ 2				; Enable Receiver Line Status Interrupt
0003:                   uart_IER_EDSSI_b	equ 3				; Enable Model Status Interrupt
                        
                        ; IER bits as values
0001:                   uart_IER_ERBFI_v	equ (1 << uart_IER_ERBFI_b)
0002:                   uart_IER_ETBEI_v	equ (1 << uart_IER_ETBEI_b)
0004:                   uart_IER_ELSI_v		equ (1 << uart_IER_ELSI_b)
0008:                   uart_IER_EDSSI_v	equ (1 << uart_IER_EDSSI_b)
                        
                        ; IER convenience
000F:                   uart_IER_INIT		equ (uart_IER_ERBFI_v | uart_IER_ETBEI_v | uart_IER_ELSI_v | uart_IER_EDSSI_v)
                        
                        ; FCR
0000:                   uart_FCR_FEN_b		equ 0				; FIFO Enable
0001:                   uart_FCR_RFR_b		equ 1				; Receive FIFO Reset
0002:                   uart_FCR_XFR_b		equ 2				; Transmit FIFO Reset
                        
                        ; FCR bits as values
0001:                   uart_FCR_FEN_v		equ (1 << uart_FCR_FEN_b)
0002:                   uart_FCR_RFR_v		equ (1 << uart_FCR_RFR_b)
0004:                   uart_FCR_XFR_v		equ (1 << uart_FCR_XFR_b)
                        
                        ; FCR convenience
0007:                   uart_FCR_INIT		equ (uart_FCR_FEN_v | uart_FCR_RFR_v | uart_FCR_XFR_v)
                        
                        ; LCR
0000:                   uart_LCR_WLS0_b		equ 0				; Word Length Select Bit 0
0001:                   uart_LCR_WLS1_b		equ 1				; Word Length Select Bit 1
0002:                   uart_LCR_STB_b		equ 2				; Number of Stop Bits
0003:                   uart_LCR_PEN_b		equ 3				; Parity Enable
0004:                   uart_LCR_EPS_b		equ 4				; Even Parity Select
0006:                   uart_LCR_SBRK_b		equ 6				; Set Break
0007:                   uart_LCR_DLAB_b		equ 7				; Divisor Latch Access Bit
                        
                        ; LCR bits as values
0001:                   uart_LCR_WLS0_v		equ (1 << uart_LCR_WLS0_b)
0002:                   uart_LCR_WLS1_v		equ (1 << uart_LCR_WLS1_b)
0004:                   uart_LCR_STB_v		equ (1 << uart_LCR_STB_b)
0008:                   uart_LCR_PEN_v		equ (1 << uart_LCR_PEN_b)
0010:                   uart_LCR_EPS_v		equ (1 << uart_LCR_EPS_b)
0040:                   uart_LCR_SBRK_v		equ (1 << uart_LCR_SBRK_b)
0080:                   uart_LCR_DLAB_v		equ (1 << uart_LCR_DLAB_b)
                        
                        ; LCR convenience
0000:                   uart_LCR_WLS5		equ (0)
0001:                   uart_LCR_WLS6		equ (uart_LCR_WLS0_v)
0002:                   uart_LCR_WLS7		equ (uart_LCR_WLS1_v)
0003:                   uart_LCR_WLS8		equ (uart_LCR_WLS0_v | uart_LCR_WLS1_v)
                        
                        ; MCR
0000:                   uart_MCR_DTR_b		equ 0				; Data Terminal Ready
0001:                   uart_MCR_RTS_b		equ 1				; Request To Send
                        
                        ; MCR bits as values
0001:                   uart_MCR_DTR_v		equ (1 << uart_MCR_DTR_b)
0002:                   uart_MCR_RTS_v		equ (1 << uart_MCR_RTS_b)
                        
                        ; MCR convenience
0003:                   uart_MCR_INIT		equ (uart_MCR_DTR_v | uart_MCR_RTS_v)
                        
                        ; LSR
0005:                   uart_LSR_THRE_b		equ 5				; Transmitter Holding Register Empty
                        
                        ; LSR bits as values
0020:                   uart_LSR_THRE_v		equ (1 << uart_LSR_THRE_b)
                        
C010:                   dipSW			equ 0xc010
                        
0000: F3       [ 4]     RST0:	di
0001: 31FF7F   [14]     	ld	sp, $7fff
0004: C36D00   [24]     	jp	start
                        
0007: FF                	defs	0x08-$
0008: C9       [10]     RST1:	ret
                        
0009: FFFFFFFF          	defs	0x10-$
000D: FFFFFF            
0010: C9       [10]     RST2:	ret
                        
0011: FFFFFFFF          	defs	0x18-$
0015: FFFFFF            
0018: C9       [10]     RST3:	ret
                        
0019: FFFFFFFF          	defs	0x20-$
001D: FFFFFF            
0020: C9       [10]     RST4:	ret
                        
0021: FFFFFFFF          	defs	0x28-$
0025: FFFFFF            
0028: C9       [10]     RST5:	ret
                        
0029: FFFFFFFF          	defs	0x30-$
002D: FFFFFF            
0030: C9       [10]     RST6:	ret
                        
0031: FFFFFFFF          	defs	0x38-$
0035: FFFFFF            
0038:                   RST7:	;ei
0038: C9       [10]     	ret
                        
0039: FFFFFFFF          	defs	0x66-$
003D: FF...             
0066: ED57     [ 9]     NMI:	ld	a, i
0068: F5       [20]     	push	af
0069: F1       [30]     	pop	af
006A: E0       [35|41]  	ret	po
006B: FB       [39]     	ei
006C: C9       [49]     	ret
                        
006D:                   start:
006D: ED56     [ 8]     	im	1
                        
006F: CDBA00   [25]     	call	uart_initialize
                        
                        	; Ready for interrupts
0072: FB       [29]     	ei
                        
                        	; write char
0073: 0629     [36]     	ld	b, 0x29
0075: CDAD00   [53]     	call	uart_transmit
                        
                        	; write char
                        	;ld	b, 0x55
                        	;call	uart_transmit
                        
                        	; write char
                        	;ld	b, 0xaa
                        	;call	uart_transmit
                        
                        	; move bytes around
0078: 018007   [10]     mover:	ld	bc, 1920
007B: 110040   [20]     	ld	de, ram
007E: 210080   [30]     	ld	hl, video
0081: 7E       [ 7]     again:	ld	a, (hl)
0082: 12       [14]     	ld	(de), a
0083: 23       [20]     	inc	hl
0084: 13       [26]     	inc	de
0085: 0B       [32]     	dec	bc
0086: 78       [36]     	ld	a, b
0087: B1       [40]     	or	c
0088: 20F7     [47|52]  	jr	nz, again
                        
008A: 018007   [10]     back:	ld	bc, 1920
008D: 110080   [20]     	ld	de, video
0090: 217F47   [30]     	ld	hl, ram + 1919
0093: 7E       [ 7]     b2:	ld	a, (hl)
0094: 12       [14]     	ld	(de), a
0095: 2B       [20]     	dec	hl
0096: 13       [26]     	inc	de
0097: 0B       [32]     	dec	bc
0098: 78       [36]     	ld	a, b
0099: B1       [40]     	or	c
009A: 20F7     [47|52]  	jr	nz, b2
                        
009C: 160A     [ 7]     pause:	ld	d, 10
                        
009E: 01FFFF   [10]     b4:	ld	bc, 65535
00A1: 0B       [ 6]     b3:	dec	bc
00A2: 78       [10]     	ld	a, b
00A3: B1       [14]     	or	c
00A4: 20FB     [21|26]  	jr	nz, b3
                        
00A6: 15       [25]     	dec	d
00A7: 20F5     [32|37]  	jr	nz, b4
                        
00A9: 18CD     [44]     	jr	mover
00AB: 18FE     [56]     	jr	$
                        
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ; uart_transmit - transmit the character in register B
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
00AD:                   uart_transmit:
                        
00AD: 2105C0   [10]     	ld	hl, uart_LSR		; read line status
00B0: 7E       [17]     	ld	a, (hl)
00B1: CB6F     [25]     	bit	uart_LSR_THRE_b, a	; wait until uart can accept a byte
00B3: 28F8     [32|37]  	jr	z, uart_transmit
                        
00B5: 2100C0   [42]     	ld	hl, uart_THR		; write the byte
00B8: 70       [49]     	ld	(hl), b
                        
00B9: C9       [59]     	ret
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ; uart_initialize - get the uart ready
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
00BA:                   uart_initialize:
                        	
                        	; Set an initial baud rate
00BA: CDD600   [17]     	call	uart_set_baud
                        
                        	; Word length 8, 1 stop, no parity
                        	; (No need to preserve other bits via read-modify-write)
00BD: 2103C0   [27]     	ld	hl, uart_LCR
00C0: 3E03     [34]     	ld	a, uart_LCR_WLS8
00C2: 77       [41]     	ld	(hl), a
                        	
                        	; Reset FIFOs and enable them
00C3: 2102C0   [51]     	ld	hl, uart_FCR
00C6: 3E07     [58]     	ld	a, uart_FCR_INIT
00C8: 77       [65]     	ld	(hl), a
                        
                        	; Set the MODEM control bits
00C9: 2104C0   [75]     	ld	hl, uart_MCR
00CC: 3E03     [82]     	ld	a, uart_MCR_INIT
00CE: 77       [89]     	ld	(hl), a
                        
                        	; Enable interrupts
00CF: 2101C0   [99]     	ld	hl, uart_IER
00D2: 3E0F     [106]    	ld	a, uart_IER_INIT
00D4: 77       [113]    	ld	(hl), a
                        	
00D5: C9       [123]    	ret
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ; uart_set_baud - set the baud rate based on the dip switches
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
00D6:                   uart_set_baud:
                        
                        	; read dip switches into de
00D6: 2110C0   [10]     	ld	hl, dipSW
00D9: 1600     [17]     	ld	d, 0
00DB: 5E       [24]     	ld	e, (hl)
                        
                        	; point to the correct entry
00DC: 21F800   [34]     	ld	hl, baud_table
00DF: 19       [45]     	add	hl, de
00E0: 19       [56]     	add	hl, de
                        
                        	; load the entry into bc
00E1: 7E       [63]     	ld	a, (hl)
00E2: 23       [69]     	inc	hl
00E3: 46       [76]     	ld	b, (hl)
00E4: 4F       [80]     	ld	c, a
                        
                        	; unlock divisor registers
00E5: 2103C0   [90]     	ld	hl, uart_LCR
00E8: CBFE     [105]    	set	uart_LCR_DLAB_b, (hl)
                        
                        	; write the baud rate divisor
00EA: 2100C0   [115]    	ld	hl, uart_DLL
00ED: 71       [122]    	ld	(hl), c
                        
00EE: 2101C0   [132]    	ld	hl, uart_DLM
00F1: 70       [139]    	ld	(hl), b
                        
                        	; lock divisor registers
00F2: 2103C0   [149]    	ld	hl, uart_LCR
00F5: CBBE     [164]    	res	uart_LCR_DLAB_b, (hl)
                        
00F7: C9       [174]    	ret
                        
00F8:                   baud_table:
00F8: A21C              	.DW	7330	; sw=0 for 110 baud
00FA: 800A              	.DW	2688	; sw=1 for 300 baud
00FC: 4005              	.DW	1344	; sw=2 for 600 baud
00FE: A002              	.DW	672	; sw=3 for 1200 baud
0100: 5001              	.DW	336	; sw=4 for 2400 baud
0102: A800              	.DW	168	; sw=5 for 4800 baud
0104: 5400              	.DW	84	; sw=6 for 9600 baud
0106: 2A00              	.DW	42	; sw=7 for 19200 baud
0108: 1500              	.DW	21	; sw=8 for 38400 baud
010A: 0E00              	.DW	14	; sw=9 for 57600 baud
010C: 0700              	.DW	7	; sw=10 for 115200 baud
                        


; +++ segments +++

#CODE ROM      = $0000 =     0,  size = $4000 = 16384

; +++ global symbols +++

NMI              = $0066 =   102  ROM     terminal_fw.asm:124 (unused)
ROM              = $0000 =     0  ROM     terminal_fw.asm:3 (unused)
ROM_end          = $4000 = 16384  ROM     terminal_fw.asm:3 (unused)
ROM_size         = $4000 = 16384  ROM     terminal_fw.asm:3 (unused)
RST0             = $0000 =     0  ROM     terminal_fw.asm:97 (unused)
RST1             = $0008 =     8  ROM     terminal_fw.asm:102 (unused)
RST2             = $0010 =    16  ROM     terminal_fw.asm:105 (unused)
RST3             = $0018 =    24  ROM     terminal_fw.asm:108 (unused)
RST4             = $0020 =    32  ROM     terminal_fw.asm:111 (unused)
RST5             = $0028 =    40  ROM     terminal_fw.asm:114 (unused)
RST6             = $0030 =    48  ROM     terminal_fw.asm:117 (unused)
RST7             = $0038 =    56  ROM     terminal_fw.asm:120 (unused)
again            = $0081 =   129  ROM     terminal_fw.asm:155
b2               = $0093 =   147  ROM     terminal_fw.asm:167
b3               = $00A1 =   161  ROM     terminal_fw.asm:179
b4               = $009E =   158  ROM     terminal_fw.asm:178
back             = $008A =   138  ROM     terminal_fw.asm:164 (unused)
baud_table       = $00F8 =   248  ROM     terminal_fw.asm:278
dipSW            = $C010 = 49168  ROM     terminal_fw.asm:95
mover            = $0078 =   120  ROM     terminal_fw.asm:152
pause            = $009C =   156  ROM     terminal_fw.asm:176 (unused)
ram              = $4000 = 16384  ROM     terminal_fw.asm:6
rom              = $0000 =     0  ROM     terminal_fw.asm:5 (unused)
start            = $006D =   109  ROM     terminal_fw.asm:131
uart_DLL         = $C000 = 49152  ROM     terminal_fw.asm:21
uart_DLM         = $C001 = 49153  ROM     terminal_fw.asm:22
uart_FCR         = $C002 = 49154  ROM     terminal_fw.asm:15
uart_FCR_FEN_b   = $0000 =     0  ROM     terminal_fw.asm:42
uart_FCR_FEN_v   = $0001 =     1  ROM     terminal_fw.asm:47
uart_FCR_INIT    = $0007 =     7  ROM     terminal_fw.asm:52
uart_FCR_RFR_b   = $0001 =     1  ROM     terminal_fw.asm:43
uart_FCR_RFR_v   = $0002 =     2  ROM     terminal_fw.asm:48
uart_FCR_XFR_b   = $0002 =     2  ROM     terminal_fw.asm:44
uart_FCR_XFR_v   = $0004 =     4  ROM     terminal_fw.asm:49
uart_IER         = $C001 = 49153  ROM     terminal_fw.asm:13
uart_IER_EDSSI_b = $0003 =     3  ROM     terminal_fw.asm:30
uart_IER_EDSSI_v = $0008 =     8  ROM     terminal_fw.asm:36
uart_IER_ELSI_b  = $0002 =     2  ROM     terminal_fw.asm:29
uart_IER_ELSI_v  = $0004 =     4  ROM     terminal_fw.asm:35
uart_IER_ERBFI_b = $0000 =     0  ROM     terminal_fw.asm:27
uart_IER_ERBFI_v = $0001 =     1  ROM     terminal_fw.asm:33
uart_IER_ETBEI_b = $0001 =     1  ROM     terminal_fw.asm:28
uart_IER_ETBEI_v = $0002 =     2  ROM     terminal_fw.asm:34
uart_IER_INIT    = $000F =    15  ROM     terminal_fw.asm:39
uart_IIR         = $C002 = 49154  ROM     terminal_fw.asm:14 (unused)
uart_LCR         = $C003 = 49155  ROM     terminal_fw.asm:16
uart_LCR_DLAB_b  = $0007 =     7  ROM     terminal_fw.asm:61
uart_LCR_DLAB_v  = $0080 =   128  ROM     terminal_fw.asm:70 (unused)
uart_LCR_EPS_b   = $0004 =     4  ROM     terminal_fw.asm:59
uart_LCR_EPS_v   = $0010 =    16  ROM     terminal_fw.asm:68 (unused)
uart_LCR_PEN_b   = $0003 =     3  ROM     terminal_fw.asm:58
uart_LCR_PEN_v   = $0008 =     8  ROM     terminal_fw.asm:67 (unused)
uart_LCR_SBRK_b  = $0006 =     6  ROM     terminal_fw.asm:60
uart_LCR_SBRK_v  = $0040 =    64  ROM     terminal_fw.asm:69 (unused)
uart_LCR_STB_b   = $0002 =     2  ROM     terminal_fw.asm:57
uart_LCR_STB_v   = $0004 =     4  ROM     terminal_fw.asm:66 (unused)
uart_LCR_WLS0_b  = $0000 =     0  ROM     terminal_fw.asm:55
uart_LCR_WLS0_v  = $0001 =     1  ROM     terminal_fw.asm:64
uart_LCR_WLS1_b  = $0001 =     1  ROM     terminal_fw.asm:56
uart_LCR_WLS1_v  = $0002 =     2  ROM     terminal_fw.asm:65
uart_LCR_WLS5    = $0000 =     0  ROM     terminal_fw.asm:73 (unused)
uart_LCR_WLS6    = $0001 =     1  ROM     terminal_fw.asm:74 (unused)
uart_LCR_WLS7    = $0002 =     2  ROM     terminal_fw.asm:75 (unused)
uart_LCR_WLS8    = $0003 =     3  ROM     terminal_fw.asm:76
uart_LSR         = $C005 = 49157  ROM     terminal_fw.asm:18
uart_LSR_THRE_b  = $0005 =     5  ROM     terminal_fw.asm:90
uart_LSR_THRE_v  = $0020 =    32  ROM     terminal_fw.asm:93 (unused)
uart_MCR         = $C004 = 49156  ROM     terminal_fw.asm:17
uart_MCR_DTR_b   = $0000 =     0  ROM     terminal_fw.asm:79
uart_MCR_DTR_v   = $0001 =     1  ROM     terminal_fw.asm:83
uart_MCR_INIT    = $0003 =     3  ROM     terminal_fw.asm:87
uart_MCR_RTS_b   = $0001 =     1  ROM     terminal_fw.asm:80
uart_MCR_RTS_v   = $0002 =     2  ROM     terminal_fw.asm:84
uart_MSR         = $C006 = 49158  ROM     terminal_fw.asm:19 (unused)
uart_RBR         = $C000 = 49152  ROM     terminal_fw.asm:11 (unused)
uart_SCR         = $C007 = 49159  ROM     terminal_fw.asm:20 (unused)
uart_THR         = $C000 = 49152  ROM     terminal_fw.asm:12
uart_base        = $C000 = 49152  ROM     terminal_fw.asm:10
uart_initialize  = $00BA =   186  ROM     terminal_fw.asm:211
uart_set_baud    = $00D6 =   214  ROM     terminal_fw.asm:243
uart_transmit    = $00AD =   173  ROM     terminal_fw.asm:195
video            = $8000 = 32768  ROM     terminal_fw.asm:7


total time: 0.0037 sec.
no errors
